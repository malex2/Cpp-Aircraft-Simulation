//  Created by Alexander McLean on 08/09/19.//  Copyright Â© 2019 Alexander McLean. All rights reserved.#include <iostream>#include <chrono>#include <math.h>#include <fstream>#include <algorithm>#include "utilities.hpp"#include "initial_conditions.hpp"#include "model_mapping.hpp"#include "data_logger.hpp"#include "time.hpp"#include "rotate_frame.hpp"#include "ground_model.hpp"#include "dynamics_model.hpp"#include "atmosphere_model.hpp"#include "propulsion_model.hpp"#include "aero_model.hpp"#include "actuator_model.hpp"int main() {    // Setup and initialize models    Utilities util;    ModelMap map(false);        DataLogger        dataLog(&map, false, savefile);    Time              time(&map);    DynamicsModel     dynamicsModel(&map, false);    RotateFrame       rotate(&map);    PropulsionModel   propulsionModel(&map, false);    ActuatorModel     actuatorModel(&map, false);    RCAeroModel       aeroModel(&map);    AtmosphereModel   atmosphereModel(&map, false);    GroundModel       groundModel(&map, false);        map.addModel("Time", &time);    map.addModel("DynamicsModel", &dynamicsModel ,forceModel);    map.addModel("RotateFrame", &rotate);    map.addModel("ActuatorModel", &actuatorModel); // (must be before propulsion and aero)    map.addModel("PropulsionModel", &propulsionModel, forceModel); // (must be before aero)    map.addModel("AeroModel", &aeroModel, forceModel);    map.addModel("AtmosphereModel", &atmosphereModel, forceModel);    map.addModel("GroundModel", &groundModel, forceModel);        // Prep loop    const int nModels = 8;    bool continueSim[nModels];    std::fill_n(continueSim, nModels, true);        int  simLoopCount = 0;        rotate.initialize();         // Must be first    dynamicsModel.initialize();  // Must be second    aeroModel.initialize();    actuatorModel.initialize();    propulsionModel.initialize();    atmosphereModel.initialize();    groundModel.initialize();        while( util.all(continueSim, nModels) )    {        // Set rotations        if ( time.performDynamics() )        {            continueSim[0] = rotate.update(); // Update rotation matrices and quaternions                    // Update GNC            //continueSim = main_flightsoftware();                    // Update forces            continueSim[1] = atmosphereModel.update(); // Compute gravity body forces            continueSim[3] = actuatorModel.update();   // Compute actuator position (must be before propulsion and aero)            continueSim[2] = propulsionModel.update(); // Compute propulsion forces (must be before aero)            continueSim[4] = aeroModel.update();       // Compute aero body forces            continueSim[5] = groundModel.update();     // Compute ground body forces                        // Update dynamics            continueSim[6] = dynamicsModel.update(); // Compute body velocity and agular velocity from forces and moments        }                if (time.performPrint() && printOutput)   { dataLog.printLog(); }        if (time.performSave() && saveOutput)     { dataLog.saveLog(); }                // Update time        continueSim[7] = time.update();                simLoopCount++;    }        return 0;}